/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.TrainingAttendAuthoritiesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrainingAttendAuthorities extends TableImpl<TrainingAttendAuthoritiesRecord> {

    private static final long serialVersionUID = -2051888852;

    /**
     * The reference instance of <code>zone.training_attend_authorities</code>
     */
    public static final TrainingAttendAuthorities TRAINING_ATTEND_AUTHORITIES = new TrainingAttendAuthorities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainingAttendAuthoritiesRecord> getRecordType() {
        return TrainingAttendAuthoritiesRecord.class;
    }

    /**
     * The column <code>zone.training_attend_authorities.authorities_id</code>.
     */
    public final TableField<TrainingAttendAuthoritiesRecord, String> AUTHORITIES_ID = createField(DSL.name("authorities_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_attend_authorities.training_attend_id</code>.
     */
    public final TableField<TrainingAttendAuthoritiesRecord, String> TRAINING_ATTEND_ID = createField(DSL.name("training_attend_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_attend_authorities.username</code>.
     */
    public final TableField<TrainingAttendAuthoritiesRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_attend_authorities.operate_type</code>.
     */
    public final TableField<TrainingAttendAuthoritiesRecord, Byte> OPERATE_TYPE = createField(DSL.name("operate_type"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>zone.training_attend_authorities.expire_date</code>.
     */
    public final TableField<TrainingAttendAuthoritiesRecord, Timestamp> EXPIRE_DATE = createField(DSL.name("expire_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>zone.training_attend_authorities</code> table reference
     */
    public TrainingAttendAuthorities() {
        this(DSL.name("training_attend_authorities"), null);
    }

    /**
     * Create an aliased <code>zone.training_attend_authorities</code> table reference
     */
    public TrainingAttendAuthorities(String alias) {
        this(DSL.name(alias), TRAINING_ATTEND_AUTHORITIES);
    }

    /**
     * Create an aliased <code>zone.training_attend_authorities</code> table reference
     */
    public TrainingAttendAuthorities(Name alias) {
        this(alias, TRAINING_ATTEND_AUTHORITIES);
    }

    private TrainingAttendAuthorities(Name alias, Table<TrainingAttendAuthoritiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainingAttendAuthorities(Name alias, Table<TrainingAttendAuthoritiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrainingAttendAuthorities(Table<O> child, ForeignKey<O, TrainingAttendAuthoritiesRecord> key) {
        super(child, key, TRAINING_ATTEND_AUTHORITIES);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAINING_ATTEND_AUTHORITIES_PRIMARY, Indexes.TRAINING_ATTEND_AUTHORITIES_TRAINING_ATTEND_ID, Indexes.TRAINING_ATTEND_AUTHORITIES_USERNAME);
    }

    @Override
    public UniqueKey<TrainingAttendAuthoritiesRecord> getPrimaryKey() {
        return Keys.KEY_TRAINING_ATTEND_AUTHORITIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<TrainingAttendAuthoritiesRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainingAttendAuthoritiesRecord>>asList(Keys.KEY_TRAINING_ATTEND_AUTHORITIES_PRIMARY);
    }

    @Override
    public List<ForeignKey<TrainingAttendAuthoritiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrainingAttendAuthoritiesRecord, ?>>asList(Keys.TRAINING_ATTEND_AUTHORITIES_IBFK_1, Keys.TRAINING_ATTEND_AUTHORITIES_IBFK_2);
    }

    public TrainingAttend trainingAttend() {
        return new TrainingAttend(this, Keys.TRAINING_ATTEND_AUTHORITIES_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.TRAINING_ATTEND_AUTHORITIES_IBFK_2);
    }

    @Override
    public TrainingAttendAuthorities as(String alias) {
        return new TrainingAttendAuthorities(DSL.name(alias), this);
    }

    @Override
    public TrainingAttendAuthorities as(Name alias) {
        return new TrainingAttendAuthorities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingAttendAuthorities rename(String name) {
        return new TrainingAttendAuthorities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingAttendAuthorities rename(Name name) {
        return new TrainingAttendAuthorities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Byte, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
