/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.TrainingLabsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrainingLabs extends TableImpl<TrainingLabsRecord> {

    private static final long serialVersionUID = 974860845;

    /**
     * The reference instance of <code>zone.training_labs</code>
     */
    public static final TrainingLabs TRAINING_LABS = new TrainingLabs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainingLabsRecord> getRecordType() {
        return TrainingLabsRecord.class;
    }

    /**
     * The column <code>zone.training_labs.training_labs_id</code>.
     */
    public final TableField<TrainingLabsRecord, String> TRAINING_LABS_ID = createField(DSL.name("training_labs_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_labs.student_number</code>.
     */
    public final TableField<TrainingLabsRecord, String> STUDENT_NUMBER = createField(DSL.name("student_number"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>zone.training_labs.real_name</code>.
     */
    public final TableField<TrainingLabsRecord, String> REAL_NAME = createField(DSL.name("real_name"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>zone.training_labs.age</code>.
     */
    public final TableField<TrainingLabsRecord, Integer> AGE = createField(DSL.name("age"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>zone.training_labs.sex</code>.
     */
    public final TableField<TrainingLabsRecord, String> SEX = createField(DSL.name("sex"), org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>zone.training_labs.organize</code>.
     */
    public final TableField<TrainingLabsRecord, String> ORGANIZE = createField(DSL.name("organize"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>zone.training_labs.photo</code>.
     */
    public final TableField<TrainingLabsRecord, String> PHOTO = createField(DSL.name("photo"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>zone.training_labs.profession</code>.
     */
    public final TableField<TrainingLabsRecord, String> PROFESSION = createField(DSL.name("profession"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>zone.training_labs.company</code>.
     */
    public final TableField<TrainingLabsRecord, String> COMPANY = createField(DSL.name("company"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>zone.training_labs.achievement</code>.
     */
    public final TableField<TrainingLabsRecord, String> ACHIEVEMENT = createField(DSL.name("achievement"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>zone.training_labs.password</code>.
     */
    public final TableField<TrainingLabsRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(800), this, "");

    /**
     * The column <code>zone.training_labs.create_date</code>.
     */
    public final TableField<TrainingLabsRecord, Timestamp> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>zone.training_labs</code> table reference
     */
    public TrainingLabs() {
        this(DSL.name("training_labs"), null);
    }

    /**
     * Create an aliased <code>zone.training_labs</code> table reference
     */
    public TrainingLabs(String alias) {
        this(DSL.name(alias), TRAINING_LABS);
    }

    /**
     * Create an aliased <code>zone.training_labs</code> table reference
     */
    public TrainingLabs(Name alias) {
        this(alias, TRAINING_LABS);
    }

    private TrainingLabs(Name alias, Table<TrainingLabsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainingLabs(Name alias, Table<TrainingLabsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrainingLabs(Table<O> child, ForeignKey<O, TrainingLabsRecord> key) {
        super(child, key, TRAINING_LABS);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAINING_LABS_PRIMARY, Indexes.TRAINING_LABS_STUDENT_NUMBER);
    }

    @Override
    public UniqueKey<TrainingLabsRecord> getPrimaryKey() {
        return Keys.KEY_TRAINING_LABS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TrainingLabsRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainingLabsRecord>>asList(Keys.KEY_TRAINING_LABS_PRIMARY, Keys.KEY_TRAINING_LABS_STUDENT_NUMBER);
    }

    @Override
    public TrainingLabs as(String alias) {
        return new TrainingLabs(DSL.name(alias), this);
    }

    @Override
    public TrainingLabs as(Name alias) {
        return new TrainingLabs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingLabs rename(String name) {
        return new TrainingLabs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingLabs rename(Name name) {
        return new TrainingLabs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, Integer, String, String, String, String, String, String, String, Timestamp> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
