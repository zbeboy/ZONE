/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.CollegeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class College extends TableImpl<CollegeRecord> {

    private static final long serialVersionUID = -1505572271;

    /**
     * The reference instance of <code>zone.college</code>
     */
    public static final College COLLEGE = new College();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollegeRecord> getRecordType() {
        return CollegeRecord.class;
    }

    /**
     * The column <code>zone.college.college_id</code>.
     */
    public final TableField<CollegeRecord, Integer> COLLEGE_ID = createField("college_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>zone.college.college_name</code>.
     */
    public final TableField<CollegeRecord, String> COLLEGE_NAME = createField("college_name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>zone.college.college_address</code>.
     */
    public final TableField<CollegeRecord, String> COLLEGE_ADDRESS = createField("college_address", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>zone.college.college_code</code>.
     */
    public final TableField<CollegeRecord, String> COLLEGE_CODE = createField("college_code", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>zone.college.college_is_del</code>.
     */
    public final TableField<CollegeRecord, Byte> COLLEGE_IS_DEL = createField("college_is_del", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>zone.college.school_id</code>.
     */
    public final TableField<CollegeRecord, Integer> SCHOOL_ID = createField("school_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>zone.college</code> table reference
     */
    public College() {
        this(DSL.name("college"), null);
    }

    /**
     * Create an aliased <code>zone.college</code> table reference
     */
    public College(String alias) {
        this(DSL.name(alias), COLLEGE);
    }

    /**
     * Create an aliased <code>zone.college</code> table reference
     */
    public College(Name alias) {
        this(alias, COLLEGE);
    }

    private College(Name alias, Table<CollegeRecord> aliased) {
        this(alias, aliased, null);
    }

    private College(Name alias, Table<CollegeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> College(Table<O> child, ForeignKey<O, CollegeRecord> key) {
        super(child, key, COLLEGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COLLEGE_COLLEGE_CODE, Indexes.COLLEGE_PRIMARY, Indexes.COLLEGE_SCHOOL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CollegeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COLLEGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CollegeRecord> getPrimaryKey() {
        return Keys.KEY_COLLEGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CollegeRecord>> getKeys() {
        return Arrays.<UniqueKey<CollegeRecord>>asList(Keys.KEY_COLLEGE_PRIMARY, Keys.KEY_COLLEGE_COLLEGE_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CollegeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CollegeRecord, ?>>asList(Keys.COLLEGE_IBFK_1);
    }

    public School school() {
        return new School(this, Keys.COLLEGE_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public College as(String alias) {
        return new College(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public College as(Name alias) {
        return new College(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public College rename(String name) {
        return new College(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public College rename(Name name) {
        return new College(name, null);
    }
}
