/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.TrainingSpecialDocumentRecord;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TrainingSpecialDocument extends TableImpl<TrainingSpecialDocumentRecord> {

    private static final long serialVersionUID = -1934562461;

    /**
     * The reference instance of <code>zone.training_special_document</code>
     */
    public static final TrainingSpecialDocument TRAINING_SPECIAL_DOCUMENT = new TrainingSpecialDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainingSpecialDocumentRecord> getRecordType() {
        return TrainingSpecialDocumentRecord.class;
    }

    /**
     * The column <code>zone.training_special_document.training_special_document_id</code>.
     */
    public final TableField<TrainingSpecialDocumentRecord, String> TRAINING_SPECIAL_DOCUMENT_ID = createField(DSL.name("training_special_document_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_special_document.title</code>.
     */
    public final TableField<TrainingSpecialDocumentRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>zone.training_special_document.username</code>.
     */
    public final TableField<TrainingSpecialDocumentRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_special_document.creator</code>.
     */
    public final TableField<TrainingSpecialDocumentRecord, String> CREATOR = createField(DSL.name("creator"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>zone.training_special_document.create_date</code>.
     */
    public final TableField<TrainingSpecialDocumentRecord, Timestamp> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>zone.training_special_document.reading</code>.
     */
    public final TableField<TrainingSpecialDocumentRecord, Integer> READING = createField(DSL.name("reading"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>zone.training_special_document.training_special_id</code>.
     */
    public final TableField<TrainingSpecialDocumentRecord, String> TRAINING_SPECIAL_ID = createField(DSL.name("training_special_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>zone.training_special_document</code> table reference
     */
    public TrainingSpecialDocument() {
        this(DSL.name("training_special_document"), null);
    }

    /**
     * Create an aliased <code>zone.training_special_document</code> table reference
     */
    public TrainingSpecialDocument(String alias) {
        this(DSL.name(alias), TRAINING_SPECIAL_DOCUMENT);
    }

    /**
     * Create an aliased <code>zone.training_special_document</code> table reference
     */
    public TrainingSpecialDocument(Name alias) {
        this(alias, TRAINING_SPECIAL_DOCUMENT);
    }

    private TrainingSpecialDocument(Name alias, Table<TrainingSpecialDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainingSpecialDocument(Name alias, Table<TrainingSpecialDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrainingSpecialDocument(Table<O> child, ForeignKey<O, TrainingSpecialDocumentRecord> key) {
        super(child, key, TRAINING_SPECIAL_DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAINING_SPECIAL_DOCUMENT_PRIMARY, Indexes.TRAINING_SPECIAL_DOCUMENT_TRAINING_SPECIAL_ID);
    }

    @Override
    public UniqueKey<TrainingSpecialDocumentRecord> getPrimaryKey() {
        return Keys.KEY_TRAINING_SPECIAL_DOCUMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TrainingSpecialDocumentRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainingSpecialDocumentRecord>>asList(Keys.KEY_TRAINING_SPECIAL_DOCUMENT_PRIMARY);
    }

    @Override
    public List<ForeignKey<TrainingSpecialDocumentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrainingSpecialDocumentRecord, ?>>asList(Keys.TRAINING_SPECIAL_DOCUMENT_IBFK_1);
    }

    public TrainingSpecial trainingSpecial() {
        return new TrainingSpecial(this, Keys.TRAINING_SPECIAL_DOCUMENT_IBFK_1);
    }

    @Override
    public TrainingSpecialDocument as(String alias) {
        return new TrainingSpecialDocument(DSL.name(alias), this);
    }

    @Override
    public TrainingSpecialDocument as(Name alias) {
        return new TrainingSpecialDocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingSpecialDocument rename(String name) {
        return new TrainingSpecialDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingSpecialDocument rename(Name name) {
        return new TrainingSpecialDocument(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, Timestamp, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
