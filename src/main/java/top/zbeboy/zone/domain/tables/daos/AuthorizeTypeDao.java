/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables.daos;


import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import top.zbeboy.zone.domain.tables.AuthorizeType;
import top.zbeboy.zone.domain.tables.records.AuthorizeTypeRecord;

import javax.annotation.Generated;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class AuthorizeTypeDao extends DAOImpl<AuthorizeTypeRecord, top.zbeboy.zone.domain.tables.pojos.AuthorizeType, Integer> {

    /**
     * Create a new AuthorizeTypeDao without any configuration
     */
    public AuthorizeTypeDao() {
        super(AuthorizeType.AUTHORIZE_TYPE, top.zbeboy.zone.domain.tables.pojos.AuthorizeType.class);
    }

    /**
     * Create a new AuthorizeTypeDao with an attached configuration
     */
    @Autowired
    public AuthorizeTypeDao(Configuration configuration) {
        super(AuthorizeType.AUTHORIZE_TYPE, top.zbeboy.zone.domain.tables.pojos.AuthorizeType.class, configuration);
    }

    @Override
    public Integer getId(top.zbeboy.zone.domain.tables.pojos.AuthorizeType object) {
        return object.getAuthorizeTypeId();
    }

    /**
     * Fetch records that have <code>authorize_type_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.AuthorizeType> fetchRangeOfAuthorizeTypeId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AuthorizeType.AUTHORIZE_TYPE.AUTHORIZE_TYPE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>authorize_type_id IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.AuthorizeType> fetchByAuthorizeTypeId(Integer... values) {
        return fetch(AuthorizeType.AUTHORIZE_TYPE.AUTHORIZE_TYPE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>authorize_type_id = value</code>
     */
    public top.zbeboy.zone.domain.tables.pojos.AuthorizeType fetchOneByAuthorizeTypeId(Integer value) {
        return fetchOne(AuthorizeType.AUTHORIZE_TYPE.AUTHORIZE_TYPE_ID, value);
    }

    /**
     * Fetch records that have <code>authorize_type_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.AuthorizeType> fetchRangeOfAuthorizeTypeName(String lowerInclusive, String upperInclusive) {
        return fetchRange(AuthorizeType.AUTHORIZE_TYPE.AUTHORIZE_TYPE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>authorize_type_name IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.AuthorizeType> fetchByAuthorizeTypeName(String... values) {
        return fetch(AuthorizeType.AUTHORIZE_TYPE.AUTHORIZE_TYPE_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>authorize_type_name = value</code>
     */
    public top.zbeboy.zone.domain.tables.pojos.AuthorizeType fetchOneByAuthorizeTypeName(String value) {
        return fetchOne(AuthorizeType.AUTHORIZE_TYPE.AUTHORIZE_TYPE_NAME, value);
    }
}
