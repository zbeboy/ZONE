/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import top.zbeboy.zone.domain.tables.Schoolroom;
import top.zbeboy.zone.domain.tables.records.SchoolroomRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class SchoolroomDao extends DAOImpl<SchoolroomRecord, top.zbeboy.zone.domain.tables.pojos.Schoolroom, Integer> {

    /**
     * Create a new SchoolroomDao without any configuration
     */
    public SchoolroomDao() {
        super(Schoolroom.SCHOOLROOM, top.zbeboy.zone.domain.tables.pojos.Schoolroom.class);
    }

    /**
     * Create a new SchoolroomDao with an attached configuration
     */
    @Autowired
    public SchoolroomDao(Configuration configuration) {
        super(Schoolroom.SCHOOLROOM, top.zbeboy.zone.domain.tables.pojos.Schoolroom.class, configuration);
    }

    @Override
    public Integer getId(top.zbeboy.zone.domain.tables.pojos.Schoolroom object) {
        return object.getSchoolroomId();
    }

    /**
     * Fetch records that have <code>schoolroom_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Schoolroom> fetchRangeOfSchoolroomId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Schoolroom.SCHOOLROOM.SCHOOLROOM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>schoolroom_id IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Schoolroom> fetchBySchoolroomId(Integer... values) {
        return fetch(Schoolroom.SCHOOLROOM.SCHOOLROOM_ID, values);
    }

    /**
     * Fetch a unique record that has <code>schoolroom_id = value</code>
     */
    public top.zbeboy.zone.domain.tables.pojos.Schoolroom fetchOneBySchoolroomId(Integer value) {
        return fetchOne(Schoolroom.SCHOOLROOM.SCHOOLROOM_ID, value);
    }

    /**
     * Fetch records that have <code>building_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Schoolroom> fetchRangeOfBuildingId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Schoolroom.SCHOOLROOM.BUILDING_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>building_id IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Schoolroom> fetchByBuildingId(Integer... values) {
        return fetch(Schoolroom.SCHOOLROOM.BUILDING_ID, values);
    }

    /**
     * Fetch records that have <code>building_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Schoolroom> fetchRangeOfBuildingCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Schoolroom.SCHOOLROOM.BUILDING_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>building_code IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Schoolroom> fetchByBuildingCode(String... values) {
        return fetch(Schoolroom.SCHOOLROOM.BUILDING_CODE, values);
    }

    /**
     * Fetch records that have <code>schoolroom_is_del BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Schoolroom> fetchRangeOfSchoolroomIsDel(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Schoolroom.SCHOOLROOM.SCHOOLROOM_IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>schoolroom_is_del IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Schoolroom> fetchBySchoolroomIsDel(Byte... values) {
        return fetch(Schoolroom.SCHOOLROOM.SCHOOLROOM_IS_DEL, values);
    }
}
