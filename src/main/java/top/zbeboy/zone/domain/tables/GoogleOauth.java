/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.GoogleOauthRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GoogleOauth extends TableImpl<GoogleOauthRecord> {

    private static final long serialVersionUID = 1451457108;

    /**
     * The reference instance of <code>zone.google_oauth</code>
     */
    public static final GoogleOauth GOOGLE_OAUTH = new GoogleOauth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GoogleOauthRecord> getRecordType() {
        return GoogleOauthRecord.class;
    }

    /**
     * The column <code>zone.google_oauth.username</code>.
     */
    public final TableField<GoogleOauthRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.google_oauth.google_oauth_key</code>.
     */
    public final TableField<GoogleOauthRecord, String> GOOGLE_OAUTH_KEY = createField(DSL.name("google_oauth_key"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.google_oauth.create_date</code>.
     */
    public final TableField<GoogleOauthRecord, Timestamp> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>zone.google_oauth.last_modifier</code>.
     */
    public final TableField<GoogleOauthRecord, Timestamp> LAST_MODIFIER = createField(DSL.name("last_modifier"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>zone.google_oauth</code> table reference
     */
    public GoogleOauth() {
        this(DSL.name("google_oauth"), null);
    }

    /**
     * Create an aliased <code>zone.google_oauth</code> table reference
     */
    public GoogleOauth(String alias) {
        this(DSL.name(alias), GOOGLE_OAUTH);
    }

    /**
     * Create an aliased <code>zone.google_oauth</code> table reference
     */
    public GoogleOauth(Name alias) {
        this(alias, GOOGLE_OAUTH);
    }

    private GoogleOauth(Name alias, Table<GoogleOauthRecord> aliased) {
        this(alias, aliased, null);
    }

    private GoogleOauth(Name alias, Table<GoogleOauthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GoogleOauth(Table<O> child, ForeignKey<O, GoogleOauthRecord> key) {
        super(child, key, GOOGLE_OAUTH);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GOOGLE_OAUTH_PRIMARY);
    }

    @Override
    public UniqueKey<GoogleOauthRecord> getPrimaryKey() {
        return Keys.KEY_GOOGLE_OAUTH_PRIMARY;
    }

    @Override
    public List<UniqueKey<GoogleOauthRecord>> getKeys() {
        return Arrays.<UniqueKey<GoogleOauthRecord>>asList(Keys.KEY_GOOGLE_OAUTH_PRIMARY);
    }

    @Override
    public List<ForeignKey<GoogleOauthRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GoogleOauthRecord, ?>>asList(Keys.GOOGLE_OAUTH_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.GOOGLE_OAUTH_IBFK_1);
    }

    @Override
    public GoogleOauth as(String alias) {
        return new GoogleOauth(DSL.name(alias), this);
    }

    @Override
    public GoogleOauth as(Name alias) {
        return new GoogleOauth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GoogleOauth rename(String name) {
        return new GoogleOauth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GoogleOauth rename(Name name) {
        return new GoogleOauth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
