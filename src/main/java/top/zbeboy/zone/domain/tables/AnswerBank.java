/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.AnswerBankRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnswerBank extends TableImpl<AnswerBankRecord> {

    private static final long serialVersionUID = -1254520353;

    /**
     * The reference instance of <code>zone.answer_bank</code>
     */
    public static final AnswerBank ANSWER_BANK = new AnswerBank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerBankRecord> getRecordType() {
        return AnswerBankRecord.class;
    }

    /**
     * The column <code>zone.answer_bank.answer_bank_id</code>.
     */
    public final TableField<AnswerBankRecord, String> ANSWER_BANK_ID = createField(DSL.name("answer_bank_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.answer_bank.bank_name</code>.
     */
    public final TableField<AnswerBankRecord, String> BANK_NAME = createField(DSL.name("bank_name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>zone.answer_bank.username</code>.
     */
    public final TableField<AnswerBankRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.answer_bank.create_date</code>.
     */
    public final TableField<AnswerBankRecord, Timestamp> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>zone.answer_bank</code> table reference
     */
    public AnswerBank() {
        this(DSL.name("answer_bank"), null);
    }

    /**
     * Create an aliased <code>zone.answer_bank</code> table reference
     */
    public AnswerBank(String alias) {
        this(DSL.name(alias), ANSWER_BANK);
    }

    /**
     * Create an aliased <code>zone.answer_bank</code> table reference
     */
    public AnswerBank(Name alias) {
        this(alias, ANSWER_BANK);
    }

    private AnswerBank(Name alias, Table<AnswerBankRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnswerBank(Name alias, Table<AnswerBankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AnswerBank(Table<O> child, ForeignKey<O, AnswerBankRecord> key) {
        super(child, key, ANSWER_BANK);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANSWER_BANK_PRIMARY, Indexes.ANSWER_BANK_USERNAME);
    }

    @Override
    public UniqueKey<AnswerBankRecord> getPrimaryKey() {
        return Keys.KEY_ANSWER_BANK_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnswerBankRecord>> getKeys() {
        return Arrays.<UniqueKey<AnswerBankRecord>>asList(Keys.KEY_ANSWER_BANK_PRIMARY);
    }

    @Override
    public List<ForeignKey<AnswerBankRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnswerBankRecord, ?>>asList(Keys.ANSWER_BANK_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.ANSWER_BANK_IBFK_1);
    }

    @Override
    public AnswerBank as(String alias) {
        return new AnswerBank(DSL.name(alias), this);
    }

    @Override
    public AnswerBank as(Name alias) {
        return new AnswerBank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerBank rename(String name) {
        return new AnswerBank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerBank rename(Name name) {
        return new AnswerBank(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
