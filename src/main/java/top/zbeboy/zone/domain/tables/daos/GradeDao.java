/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import top.zbeboy.zone.domain.tables.Grade;
import top.zbeboy.zone.domain.tables.records.GradeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class GradeDao extends DAOImpl<GradeRecord, top.zbeboy.zone.domain.tables.pojos.Grade, Integer> {

    /**
     * Create a new GradeDao without any configuration
     */
    public GradeDao() {
        super(Grade.GRADE, top.zbeboy.zone.domain.tables.pojos.Grade.class);
    }

    /**
     * Create a new GradeDao with an attached configuration
     */
    @Autowired
    public GradeDao(Configuration configuration) {
        super(Grade.GRADE, top.zbeboy.zone.domain.tables.pojos.Grade.class, configuration);
    }

    @Override
    public Integer getId(top.zbeboy.zone.domain.tables.pojos.Grade object) {
        return object.getGradeId();
    }

    /**
     * Fetch records that have <code>grade_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Grade> fetchRangeOfGradeId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Grade.GRADE.GRADE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>grade_id IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Grade> fetchByGradeId(Integer... values) {
        return fetch(Grade.GRADE.GRADE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>grade_id = value</code>
     */
    public top.zbeboy.zone.domain.tables.pojos.Grade fetchOneByGradeId(Integer value) {
        return fetchOne(Grade.GRADE.GRADE_ID, value);
    }

    /**
     * Fetch records that have <code>grade BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Grade> fetchRangeOfGrade(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Grade.GRADE.GRADE_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>grade IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Grade> fetchByGrade(Integer... values) {
        return fetch(Grade.GRADE.GRADE_, values);
    }

    /**
     * Fetch records that have <code>grade_is_del BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Grade> fetchRangeOfGradeIsDel(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Grade.GRADE.GRADE_IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>grade_is_del IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Grade> fetchByGradeIsDel(Byte... values) {
        return fetch(Grade.GRADE.GRADE_IS_DEL, values);
    }

    /**
     * Fetch records that have <code>science_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Grade> fetchRangeOfScienceId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Grade.GRADE.SCIENCE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>science_id IN (values)</code>
     */
    public List<top.zbeboy.zone.domain.tables.pojos.Grade> fetchByScienceId(Integer... values) {
        return fetch(Grade.GRADE.SCIENCE_ID, values);
    }
}
