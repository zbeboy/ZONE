/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.StaffRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Staff extends TableImpl<StaffRecord> {

    private static final long serialVersionUID = -1639131877;

    /**
     * The reference instance of <code>zone.staff</code>
     */
    public static final Staff STAFF = new Staff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaffRecord> getRecordType() {
        return StaffRecord.class;
    }

    /**
     * The column <code>zone.staff.staff_id</code>.
     */
    public final TableField<StaffRecord, Integer> STAFF_ID = createField("staff_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>zone.staff.staff_number</code>.
     */
    public final TableField<StaffRecord, String> STAFF_NUMBER = createField("staff_number", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>zone.staff.birthday</code>.
     */
    public final TableField<StaffRecord, Date> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>zone.staff.sex</code>.
     */
    public final TableField<StaffRecord, String> SEX = createField("sex", org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>zone.staff.family_residence</code>.
     */
    public final TableField<StaffRecord, String> FAMILY_RESIDENCE = createField("family_residence", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>zone.staff.political_landscape_id</code>.
     */
    public final TableField<StaffRecord, Integer> POLITICAL_LANDSCAPE_ID = createField("political_landscape_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>zone.staff.nation_id</code>.
     */
    public final TableField<StaffRecord, Integer> NATION_ID = createField("nation_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>zone.staff.post</code>.
     */
    public final TableField<StaffRecord, String> POST = createField("post", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>zone.staff.academic_title_id</code>.
     */
    public final TableField<StaffRecord, Integer> ACADEMIC_TITLE_ID = createField("academic_title_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>zone.staff.department_id</code>.
     */
    public final TableField<StaffRecord, Integer> DEPARTMENT_ID = createField("department_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>zone.staff.username</code>.
     */
    public final TableField<StaffRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>zone.staff</code> table reference
     */
    public Staff() {
        this(DSL.name("staff"), null);
    }

    /**
     * Create an aliased <code>zone.staff</code> table reference
     */
    public Staff(String alias) {
        this(DSL.name(alias), STAFF);
    }

    /**
     * Create an aliased <code>zone.staff</code> table reference
     */
    public Staff(Name alias) {
        this(alias, STAFF);
    }

    private Staff(Name alias, Table<StaffRecord> aliased) {
        this(alias, aliased, null);
    }

    private Staff(Name alias, Table<StaffRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Staff(Table<O> child, ForeignKey<O, StaffRecord> key) {
        super(child, key, STAFF);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STAFF_DEPARTMENT_ID, Indexes.STAFF_PRIMARY, Indexes.STAFF_STAFF_NUMBER, Indexes.STAFF_USERNAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StaffRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STAFF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StaffRecord> getPrimaryKey() {
        return Keys.KEY_STAFF_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StaffRecord>> getKeys() {
        return Arrays.<UniqueKey<StaffRecord>>asList(Keys.KEY_STAFF_PRIMARY, Keys.KEY_STAFF_STAFF_NUMBER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StaffRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StaffRecord, ?>>asList(Keys.STAFF_IBFK_1, Keys.STAFF_IBFK_2);
    }

    public Department department() {
        return new Department(this, Keys.STAFF_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.STAFF_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Staff as(String alias) {
        return new Staff(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Staff as(Name alias) {
        return new Staff(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(String name) {
        return new Staff(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(Name name) {
        return new Staff(name, null);
    }
}
