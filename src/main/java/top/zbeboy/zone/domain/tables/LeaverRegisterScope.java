/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.LeaverRegisterScopeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LeaverRegisterScope extends TableImpl<LeaverRegisterScopeRecord> {

    private static final long serialVersionUID = -1144483910;

    /**
     * The reference instance of <code>zone.leaver_register_scope</code>
     */
    public static final LeaverRegisterScope LEAVER_REGISTER_SCOPE = new LeaverRegisterScope();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LeaverRegisterScopeRecord> getRecordType() {
        return LeaverRegisterScopeRecord.class;
    }

    /**
     * The column <code>zone.leaver_register_scope.leaver_register_release_id</code>.
     */
    public final TableField<LeaverRegisterScopeRecord, String> LEAVER_REGISTER_RELEASE_ID = createField(DSL.name("leaver_register_release_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.leaver_register_scope.data_id</code>.
     */
    public final TableField<LeaverRegisterScopeRecord, Integer> DATA_ID = createField(DSL.name("data_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>zone.leaver_register_scope</code> table reference
     */
    public LeaverRegisterScope() {
        this(DSL.name("leaver_register_scope"), null);
    }

    /**
     * Create an aliased <code>zone.leaver_register_scope</code> table reference
     */
    public LeaverRegisterScope(String alias) {
        this(DSL.name(alias), LEAVER_REGISTER_SCOPE);
    }

    /**
     * Create an aliased <code>zone.leaver_register_scope</code> table reference
     */
    public LeaverRegisterScope(Name alias) {
        this(alias, LEAVER_REGISTER_SCOPE);
    }

    private LeaverRegisterScope(Name alias, Table<LeaverRegisterScopeRecord> aliased) {
        this(alias, aliased, null);
    }

    private LeaverRegisterScope(Name alias, Table<LeaverRegisterScopeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> LeaverRegisterScope(Table<O> child, ForeignKey<O, LeaverRegisterScopeRecord> key) {
        super(child, key, LEAVER_REGISTER_SCOPE);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEAVER_REGISTER_SCOPE_LEAVER_REGISTER_RELEASE_ID);
    }

    @Override
    public List<UniqueKey<LeaverRegisterScopeRecord>> getKeys() {
        return Arrays.<UniqueKey<LeaverRegisterScopeRecord>>asList(Keys.KEY_LEAVER_REGISTER_SCOPE_LEAVER_REGISTER_RELEASE_ID);
    }

    @Override
    public List<ForeignKey<LeaverRegisterScopeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LeaverRegisterScopeRecord, ?>>asList(Keys.LEAVER_REGISTER_SCOPE_IBFK_1);
    }

    public LeaverRegisterRelease leaverRegisterRelease() {
        return new LeaverRegisterRelease(this, Keys.LEAVER_REGISTER_SCOPE_IBFK_1);
    }

    @Override
    public LeaverRegisterScope as(String alias) {
        return new LeaverRegisterScope(DSL.name(alias), this);
    }

    @Override
    public LeaverRegisterScope as(Name alias) {
        return new LeaverRegisterScope(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LeaverRegisterScope rename(String name) {
        return new LeaverRegisterScope(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LeaverRegisterScope rename(Name name) {
        return new LeaverRegisterScope(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
