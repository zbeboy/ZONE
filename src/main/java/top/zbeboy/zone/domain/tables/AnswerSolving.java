/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.AnswerSolvingRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnswerSolving extends TableImpl<AnswerSolvingRecord> {

    private static final long serialVersionUID = -447782401;

    /**
     * The reference instance of <code>zone.answer_solving</code>
     */
    public static final AnswerSolving ANSWER_SOLVING = new AnswerSolving();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerSolvingRecord> getRecordType() {
        return AnswerSolvingRecord.class;
    }

    /**
     * The column <code>zone.answer_solving.answer_solving_id</code>.
     */
    public final TableField<AnswerSolvingRecord, String> ANSWER_SOLVING_ID = createField(DSL.name("answer_solving_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.answer_solving.answer_subject_id</code>.
     */
    public final TableField<AnswerSolvingRecord, String> ANSWER_SUBJECT_ID = createField(DSL.name("answer_subject_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.answer_solving.select_key</code>.
     */
    public final TableField<AnswerSolvingRecord, String> SELECT_KEY = createField(DSL.name("select_key"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>zone.answer_solving.right_key</code>.
     */
    public final TableField<AnswerSolvingRecord, String> RIGHT_KEY = createField(DSL.name("right_key"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>zone.answer_solving.user_id</code>.
     */
    public final TableField<AnswerSolvingRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.answer_solving.user_name</code>.
     */
    public final TableField<AnswerSolvingRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>zone.answer_solving.answer_release_id</code>.
     */
    public final TableField<AnswerSolvingRecord, String> ANSWER_RELEASE_ID = createField(DSL.name("answer_release_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>zone.answer_solving</code> table reference
     */
    public AnswerSolving() {
        this(DSL.name("answer_solving"), null);
    }

    /**
     * Create an aliased <code>zone.answer_solving</code> table reference
     */
    public AnswerSolving(String alias) {
        this(DSL.name(alias), ANSWER_SOLVING);
    }

    /**
     * Create an aliased <code>zone.answer_solving</code> table reference
     */
    public AnswerSolving(Name alias) {
        this(alias, ANSWER_SOLVING);
    }

    private AnswerSolving(Name alias, Table<AnswerSolvingRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnswerSolving(Name alias, Table<AnswerSolvingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AnswerSolving(Table<O> child, ForeignKey<O, AnswerSolvingRecord> key) {
        super(child, key, ANSWER_SOLVING);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANSWER_SOLVING_ANSWER_RELEASE_ID, Indexes.ANSWER_SOLVING_ANSWER_SUBJECT_ID, Indexes.ANSWER_SOLVING_PRIMARY);
    }

    @Override
    public UniqueKey<AnswerSolvingRecord> getPrimaryKey() {
        return Keys.KEY_ANSWER_SOLVING_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnswerSolvingRecord>> getKeys() {
        return Arrays.<UniqueKey<AnswerSolvingRecord>>asList(Keys.KEY_ANSWER_SOLVING_PRIMARY);
    }

    @Override
    public List<ForeignKey<AnswerSolvingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnswerSolvingRecord, ?>>asList(Keys.ANSWER_SOLVING_IBFK_1, Keys.ANSWER_SOLVING_IBFK_2);
    }

    public AnswerSubject answerSubject() {
        return new AnswerSubject(this, Keys.ANSWER_SOLVING_IBFK_1);
    }

    public AnswerRelease answerRelease() {
        return new AnswerRelease(this, Keys.ANSWER_SOLVING_IBFK_2);
    }

    @Override
    public AnswerSolving as(String alias) {
        return new AnswerSolving(DSL.name(alias), this);
    }

    @Override
    public AnswerSolving as(Name alias) {
        return new AnswerSolving(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerSolving rename(String name) {
        return new AnswerSolving(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerSolving rename(Name name) {
        return new AnswerSolving(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
