/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.WeiXinRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WeiXin extends TableImpl<WeiXinRecord> {

    private static final long serialVersionUID = 2031772150;

    /**
     * The reference instance of <code>zone.wei_xin</code>
     */
    public static final WeiXin WEI_XIN = new WeiXin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WeiXinRecord> getRecordType() {
        return WeiXinRecord.class;
    }

    /**
     * The column <code>zone.wei_xin.wei_xin_id</code>.
     */
    public final TableField<WeiXinRecord, Integer> WEI_XIN_ID = createField(DSL.name("wei_xin_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>zone.wei_xin.open_id</code>.
     */
    public final TableField<WeiXinRecord, String> OPEN_ID = createField(DSL.name("open_id"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>zone.wei_xin.session_key</code>.
     */
    public final TableField<WeiXinRecord, String> SESSION_KEY = createField(DSL.name("session_key"), org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>zone.wei_xin.union_id</code>.
     */
    public final TableField<WeiXinRecord, String> UNION_ID = createField(DSL.name("union_id"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>zone.wei_xin.app_id</code>.
     */
    public final TableField<WeiXinRecord, String> APP_ID = createField(DSL.name("app_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.wei_xin.username</code>.
     */
    public final TableField<WeiXinRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.wei_xin.res_code</code>.
     */
    public final TableField<WeiXinRecord, String> RES_CODE = createField(DSL.name("res_code"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>zone.wei_xin.result</code>.
     */
    public final TableField<WeiXinRecord, String> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>zone.wei_xin.create_date</code>.
     */
    public final TableField<WeiXinRecord, Timestamp> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>zone.wei_xin</code> table reference
     */
    public WeiXin() {
        this(DSL.name("wei_xin"), null);
    }

    /**
     * Create an aliased <code>zone.wei_xin</code> table reference
     */
    public WeiXin(String alias) {
        this(DSL.name(alias), WEI_XIN);
    }

    /**
     * Create an aliased <code>zone.wei_xin</code> table reference
     */
    public WeiXin(Name alias) {
        this(alias, WEI_XIN);
    }

    private WeiXin(Name alias, Table<WeiXinRecord> aliased) {
        this(alias, aliased, null);
    }

    private WeiXin(Name alias, Table<WeiXinRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> WeiXin(Table<O> child, ForeignKey<O, WeiXinRecord> key) {
        super(child, key, WEI_XIN);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEI_XIN_OPEN_ID, Indexes.WEI_XIN_PRIMARY, Indexes.WEI_XIN_USERNAME);
    }

    @Override
    public Identity<WeiXinRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WEI_XIN;
    }

    @Override
    public UniqueKey<WeiXinRecord> getPrimaryKey() {
        return Keys.KEY_WEI_XIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<WeiXinRecord>> getKeys() {
        return Arrays.<UniqueKey<WeiXinRecord>>asList(Keys.KEY_WEI_XIN_PRIMARY, Keys.KEY_WEI_XIN_OPEN_ID);
    }

    @Override
    public List<ForeignKey<WeiXinRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WeiXinRecord, ?>>asList(Keys.WEI_XIN_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.WEI_XIN_IBFK_1);
    }

    @Override
    public WeiXin as(String alias) {
        return new WeiXin(DSL.name(alias), this);
    }

    @Override
    public WeiXin as(Name alias) {
        return new WeiXin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WeiXin rename(String name) {
        return new WeiXin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WeiXin rename(Name name) {
        return new WeiXin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, String, Timestamp> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
