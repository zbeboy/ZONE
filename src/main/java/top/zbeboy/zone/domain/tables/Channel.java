/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.ChannelRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Channel extends TableImpl<ChannelRecord> {

    private static final long serialVersionUID = -1340929000;

    /**
     * The reference instance of <code>zone.channel</code>
     */
    public static final Channel CHANNEL = new Channel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChannelRecord> getRecordType() {
        return ChannelRecord.class;
    }

    /**
     * The column <code>zone.channel.channel_id</code>.
     */
    public final TableField<ChannelRecord, Integer> CHANNEL_ID = createField(DSL.name("channel_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>zone.channel.channel_name</code>.
     */
    public final TableField<ChannelRecord, String> CHANNEL_NAME = createField(DSL.name("channel_name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>zone.channel</code> table reference
     */
    public Channel() {
        this(DSL.name("channel"), null);
    }

    /**
     * Create an aliased <code>zone.channel</code> table reference
     */
    public Channel(String alias) {
        this(DSL.name(alias), CHANNEL);
    }

    /**
     * Create an aliased <code>zone.channel</code> table reference
     */
    public Channel(Name alias) {
        this(alias, CHANNEL);
    }

    private Channel(Name alias, Table<ChannelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Channel(Name alias, Table<ChannelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Channel(Table<O> child, ForeignKey<O, ChannelRecord> key) {
        super(child, key, CHANNEL);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHANNEL_CHANNEL_NAME, Indexes.CHANNEL_PRIMARY);
    }

    @Override
    public Identity<ChannelRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CHANNEL;
    }

    @Override
    public UniqueKey<ChannelRecord> getPrimaryKey() {
        return Keys.KEY_CHANNEL_PRIMARY;
    }

    @Override
    public List<UniqueKey<ChannelRecord>> getKeys() {
        return Arrays.<UniqueKey<ChannelRecord>>asList(Keys.KEY_CHANNEL_PRIMARY, Keys.KEY_CHANNEL_CHANNEL_NAME);
    }

    @Override
    public Channel as(String alias) {
        return new Channel(DSL.name(alias), this);
    }

    @Override
    public Channel as(Name alias) {
        return new Channel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(String name) {
        return new Channel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(Name name) {
        return new Channel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
