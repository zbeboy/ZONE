/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.UserNotifyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserNotify extends TableImpl<UserNotifyRecord> {

    private static final long serialVersionUID = 528539538;

    /**
     * The reference instance of <code>zone.user_notify</code>
     */
    public static final UserNotify USER_NOTIFY = new UserNotify();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserNotifyRecord> getRecordType() {
        return UserNotifyRecord.class;
    }

    /**
     * The column <code>zone.user_notify.user_notify_id</code>.
     */
    public final TableField<UserNotifyRecord, String> USER_NOTIFY_ID = createField("user_notify_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.user_notify.notify_title</code>.
     */
    public final TableField<UserNotifyRecord, String> NOTIFY_TITLE = createField("notify_title", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>zone.user_notify.notify_content</code>.
     */
    public final TableField<UserNotifyRecord, String> NOTIFY_CONTENT = createField("notify_content", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>zone.user_notify.create_date</code>.
     */
    public final TableField<UserNotifyRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>zone.user_notify.notify_type</code>.
     */
    public final TableField<UserNotifyRecord, String> NOTIFY_TYPE = createField("notify_type", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>zone.user_notify.is_see</code>.
     */
    public final TableField<UserNotifyRecord, Byte> IS_SEE = createField("is_see", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>zone.user_notify.send_user</code>.
     */
    public final TableField<UserNotifyRecord, String> SEND_USER = createField("send_user", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.user_notify.accept_user</code>.
     */
    public final TableField<UserNotifyRecord, String> ACCEPT_USER = createField("accept_user", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>zone.user_notify</code> table reference
     */
    public UserNotify() {
        this(DSL.name("user_notify"), null);
    }

    /**
     * Create an aliased <code>zone.user_notify</code> table reference
     */
    public UserNotify(String alias) {
        this(DSL.name(alias), USER_NOTIFY);
    }

    /**
     * Create an aliased <code>zone.user_notify</code> table reference
     */
    public UserNotify(Name alias) {
        this(alias, USER_NOTIFY);
    }

    private UserNotify(Name alias, Table<UserNotifyRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserNotify(Name alias, Table<UserNotifyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserNotify(Table<O> child, ForeignKey<O, UserNotifyRecord> key) {
        super(child, key, USER_NOTIFY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_NOTIFY_ACCEPT_USER, Indexes.USER_NOTIFY_PRIMARY, Indexes.USER_NOTIFY_SEND_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserNotifyRecord> getPrimaryKey() {
        return Keys.KEY_USER_NOTIFY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserNotifyRecord>> getKeys() {
        return Arrays.<UniqueKey<UserNotifyRecord>>asList(Keys.KEY_USER_NOTIFY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserNotifyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserNotifyRecord, ?>>asList(Keys.USER_NOTIFY_IBFK_1, Keys.USER_NOTIFY_IBFK_2);
    }

    public Users userNotifyIbfk_1() {
        return new Users(this, Keys.USER_NOTIFY_IBFK_1);
    }

    public Users userNotifyIbfk_2() {
        return new Users(this, Keys.USER_NOTIFY_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserNotify as(String alias) {
        return new UserNotify(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserNotify as(Name alias) {
        return new UserNotify(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserNotify rename(String name) {
        return new UserNotify(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserNotify rename(Name name) {
        return new UserNotify(name, null);
    }
}
