/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.AttendUsersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AttendUsers extends TableImpl<AttendUsersRecord> {

    private static final long serialVersionUID = -1683281288;

    /**
     * The reference instance of <code>zone.attend_users</code>
     */
    public static final AttendUsers ATTEND_USERS = new AttendUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttendUsersRecord> getRecordType() {
        return AttendUsersRecord.class;
    }

    /**
     * The column <code>zone.attend_users.attend_users_id</code>.
     */
    public final TableField<AttendUsersRecord, String> ATTEND_USERS_ID = createField(DSL.name("attend_users_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.attend_users.student_id</code>.
     */
    public final TableField<AttendUsersRecord, Integer> STUDENT_ID = createField(DSL.name("student_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>zone.attend_users.status</code>.
     */
    public final TableField<AttendUsersRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>zone.attend_users.attend_release_sub_id</code>.
     */
    public final TableField<AttendUsersRecord, String> ATTEND_RELEASE_SUB_ID = createField(DSL.name("attend_release_sub_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.attend_users.create_date</code>.
     */
    public final TableField<AttendUsersRecord, Timestamp> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>zone.attend_users.operate_date</code>.
     */
    public final TableField<AttendUsersRecord, Timestamp> OPERATE_DATE = createField(DSL.name("operate_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>zone.attend_users.remark</code>.
     */
    public final TableField<AttendUsersRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * Create a <code>zone.attend_users</code> table reference
     */
    public AttendUsers() {
        this(DSL.name("attend_users"), null);
    }

    /**
     * Create an aliased <code>zone.attend_users</code> table reference
     */
    public AttendUsers(String alias) {
        this(DSL.name(alias), ATTEND_USERS);
    }

    /**
     * Create an aliased <code>zone.attend_users</code> table reference
     */
    public AttendUsers(Name alias) {
        this(alias, ATTEND_USERS);
    }

    private AttendUsers(Name alias, Table<AttendUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AttendUsers(Name alias, Table<AttendUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AttendUsers(Table<O> child, ForeignKey<O, AttendUsersRecord> key) {
        super(child, key, ATTEND_USERS);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ATTEND_USERS_ATTEND_RELEASE_SUB_ID, Indexes.ATTEND_USERS_PRIMARY, Indexes.ATTEND_USERS_STUDENT_ID);
    }

    @Override
    public UniqueKey<AttendUsersRecord> getPrimaryKey() {
        return Keys.KEY_ATTEND_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AttendUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<AttendUsersRecord>>asList(Keys.KEY_ATTEND_USERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<AttendUsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AttendUsersRecord, ?>>asList(Keys.ATTEND_USERS_IBFK_2, Keys.ATTEND_USERS_IBFK_1);
    }

    public Student student() {
        return new Student(this, Keys.ATTEND_USERS_IBFK_2);
    }

    public AttendReleaseSub attendReleaseSub() {
        return new AttendReleaseSub(this, Keys.ATTEND_USERS_IBFK_1);
    }

    @Override
    public AttendUsers as(String alias) {
        return new AttendUsers(DSL.name(alias), this);
    }

    @Override
    public AttendUsers as(Name alias) {
        return new AttendUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AttendUsers rename(String name) {
        return new AttendUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AttendUsers rename(Name name) {
        return new AttendUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, Byte, String, Timestamp, Timestamp, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
