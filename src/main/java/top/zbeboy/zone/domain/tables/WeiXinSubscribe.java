/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.WeiXinSubscribeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WeiXinSubscribe extends TableImpl<WeiXinSubscribeRecord> {

    private static final long serialVersionUID = -1590648587;

    /**
     * The reference instance of <code>zone.wei_xin_subscribe</code>
     */
    public static final WeiXinSubscribe WEI_XIN_SUBSCRIBE = new WeiXinSubscribe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WeiXinSubscribeRecord> getRecordType() {
        return WeiXinSubscribeRecord.class;
    }

    /**
     * The column <code>zone.wei_xin_subscribe.subscribe_id</code>.
     */
    public final TableField<WeiXinSubscribeRecord, Integer> SUBSCRIBE_ID = createField(DSL.name("subscribe_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>zone.wei_xin_subscribe.template_id</code>.
     */
    public final TableField<WeiXinSubscribeRecord, String> TEMPLATE_ID = createField(DSL.name("template_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>zone.wei_xin_subscribe.type</code>.
     */
    public final TableField<WeiXinSubscribeRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>zone.wei_xin_subscribe.page</code>.
     */
    public final TableField<WeiXinSubscribeRecord, String> PAGE = createField(DSL.name("page"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>zone.wei_xin_subscribe.data</code>.
     */
    public final TableField<WeiXinSubscribeRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>zone.wei_xin_subscribe.mini_program_state</code>.
     */
    public final TableField<WeiXinSubscribeRecord, String> MINI_PROGRAM_STATE = createField(DSL.name("mini_program_state"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>zone.wei_xin_subscribe.lang</code>.
     */
    public final TableField<WeiXinSubscribeRecord, String> LANG = createField(DSL.name("lang"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>zone.wei_xin_subscribe.username</code>.
     */
    public final TableField<WeiXinSubscribeRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>zone.wei_xin_subscribe</code> table reference
     */
    public WeiXinSubscribe() {
        this(DSL.name("wei_xin_subscribe"), null);
    }

    /**
     * Create an aliased <code>zone.wei_xin_subscribe</code> table reference
     */
    public WeiXinSubscribe(String alias) {
        this(DSL.name(alias), WEI_XIN_SUBSCRIBE);
    }

    /**
     * Create an aliased <code>zone.wei_xin_subscribe</code> table reference
     */
    public WeiXinSubscribe(Name alias) {
        this(alias, WEI_XIN_SUBSCRIBE);
    }

    private WeiXinSubscribe(Name alias, Table<WeiXinSubscribeRecord> aliased) {
        this(alias, aliased, null);
    }

    private WeiXinSubscribe(Name alias, Table<WeiXinSubscribeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> WeiXinSubscribe(Table<O> child, ForeignKey<O, WeiXinSubscribeRecord> key) {
        super(child, key, WEI_XIN_SUBSCRIBE);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEI_XIN_SUBSCRIBE_PRIMARY, Indexes.WEI_XIN_SUBSCRIBE_USERNAME);
    }

    @Override
    public Identity<WeiXinSubscribeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WEI_XIN_SUBSCRIBE;
    }

    @Override
    public UniqueKey<WeiXinSubscribeRecord> getPrimaryKey() {
        return Keys.KEY_WEI_XIN_SUBSCRIBE_PRIMARY;
    }

    @Override
    public List<UniqueKey<WeiXinSubscribeRecord>> getKeys() {
        return Arrays.<UniqueKey<WeiXinSubscribeRecord>>asList(Keys.KEY_WEI_XIN_SUBSCRIBE_PRIMARY);
    }

    @Override
    public List<ForeignKey<WeiXinSubscribeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WeiXinSubscribeRecord, ?>>asList(Keys.WEI_XIN_SUBSCRIBE_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.WEI_XIN_SUBSCRIBE_IBFK_1);
    }

    @Override
    public WeiXinSubscribe as(String alias) {
        return new WeiXinSubscribe(DSL.name(alias), this);
    }

    @Override
    public WeiXinSubscribe as(Name alias) {
        return new WeiXinSubscribe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WeiXinSubscribe rename(String name) {
        return new WeiXinSubscribe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WeiXinSubscribe rename(Name name) {
        return new WeiXinSubscribe(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
