/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.InternshipReleaseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InternshipRelease extends TableImpl<InternshipReleaseRecord> {

    private static final long serialVersionUID = 2050254881;

    /**
     * The reference instance of <code>zone.internship_release</code>
     */
    public static final InternshipRelease INTERNSHIP_RELEASE = new InternshipRelease();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InternshipReleaseRecord> getRecordType() {
        return InternshipReleaseRecord.class;
    }

    /**
     * The column <code>zone.internship_release.internship_release_id</code>.
     */
    public final TableField<InternshipReleaseRecord, String> INTERNSHIP_RELEASE_ID = createField(DSL.name("internship_release_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.internship_release.internship_title</code>.
     */
    public final TableField<InternshipReleaseRecord, String> INTERNSHIP_TITLE = createField(DSL.name("internship_title"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>zone.internship_release.release_time</code>.
     */
    public final TableField<InternshipReleaseRecord, Timestamp> RELEASE_TIME = createField(DSL.name("release_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>zone.internship_release.username</code>.
     */
    public final TableField<InternshipReleaseRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.internship_release.teacher_distribution_start_time</code>.
     */
    public final TableField<InternshipReleaseRecord, Timestamp> TEACHER_DISTRIBUTION_START_TIME = createField(DSL.name("teacher_distribution_start_time"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>zone.internship_release.teacher_distribution_end_time</code>.
     */
    public final TableField<InternshipReleaseRecord, Timestamp> TEACHER_DISTRIBUTION_END_TIME = createField(DSL.name("teacher_distribution_end_time"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>zone.internship_release.start_time</code>.
     */
    public final TableField<InternshipReleaseRecord, Timestamp> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>zone.internship_release.end_time</code>.
     */
    public final TableField<InternshipReleaseRecord, Timestamp> END_TIME = createField(DSL.name("end_time"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>zone.internship_release.internship_release_is_del</code>.
     */
    public final TableField<InternshipReleaseRecord, Byte> INTERNSHIP_RELEASE_IS_DEL = createField(DSL.name("internship_release_is_del"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>zone.internship_release.internship_type_id</code>.
     */
    public final TableField<InternshipReleaseRecord, Integer> INTERNSHIP_TYPE_ID = createField(DSL.name("internship_type_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>zone.internship_release.publisher</code>.
     */
    public final TableField<InternshipReleaseRecord, String> PUBLISHER = createField(DSL.name("publisher"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>zone.internship_release.science_id</code>.
     */
    public final TableField<InternshipReleaseRecord, Integer> SCIENCE_ID = createField(DSL.name("science_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>zone.internship_release.is_time_limit</code>.
     */
    public final TableField<InternshipReleaseRecord, Byte> IS_TIME_LIMIT = createField(DSL.name("is_time_limit"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>zone.internship_release</code> table reference
     */
    public InternshipRelease() {
        this(DSL.name("internship_release"), null);
    }

    /**
     * Create an aliased <code>zone.internship_release</code> table reference
     */
    public InternshipRelease(String alias) {
        this(DSL.name(alias), INTERNSHIP_RELEASE);
    }

    /**
     * Create an aliased <code>zone.internship_release</code> table reference
     */
    public InternshipRelease(Name alias) {
        this(alias, INTERNSHIP_RELEASE);
    }

    private InternshipRelease(Name alias, Table<InternshipReleaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private InternshipRelease(Name alias, Table<InternshipReleaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InternshipRelease(Table<O> child, ForeignKey<O, InternshipReleaseRecord> key) {
        super(child, key, INTERNSHIP_RELEASE);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INTERNSHIP_RELEASE_INTERNSHIP_TYPE_ID, Indexes.INTERNSHIP_RELEASE_PRIMARY, Indexes.INTERNSHIP_RELEASE_SCIENCE_ID, Indexes.INTERNSHIP_RELEASE_USERNAME);
    }

    @Override
    public UniqueKey<InternshipReleaseRecord> getPrimaryKey() {
        return Keys.KEY_INTERNSHIP_RELEASE_PRIMARY;
    }

    @Override
    public List<UniqueKey<InternshipReleaseRecord>> getKeys() {
        return Arrays.<UniqueKey<InternshipReleaseRecord>>asList(Keys.KEY_INTERNSHIP_RELEASE_PRIMARY);
    }

    @Override
    public List<ForeignKey<InternshipReleaseRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InternshipReleaseRecord, ?>>asList(Keys.INTERNSHIP_RELEASE_IBFK_1, Keys.INTERNSHIP_RELEASE_IBFK_3, Keys.INTERNSHIP_RELEASE_IBFK_2);
    }

    public Users users() {
        return new Users(this, Keys.INTERNSHIP_RELEASE_IBFK_1);
    }

    public InternshipType internshipType() {
        return new InternshipType(this, Keys.INTERNSHIP_RELEASE_IBFK_3);
    }

    public Science science() {
        return new Science(this, Keys.INTERNSHIP_RELEASE_IBFK_2);
    }

    @Override
    public InternshipRelease as(String alias) {
        return new InternshipRelease(DSL.name(alias), this);
    }

    @Override
    public InternshipRelease as(Name alias) {
        return new InternshipRelease(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InternshipRelease rename(String name) {
        return new InternshipRelease(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InternshipRelease rename(Name name) {
        return new InternshipRelease(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, Timestamp, String, Timestamp, Timestamp, Timestamp, Timestamp, Byte, Integer, String, Integer, Byte> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
