/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.WeiXinSmallVersionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WeiXinSmallVersion extends TableImpl<WeiXinSmallVersionRecord> {

    private static final long serialVersionUID = 757006343;

    /**
     * The reference instance of <code>zone.wei_xin_small_version</code>
     */
    public static final WeiXinSmallVersion WEI_XIN_SMALL_VERSION = new WeiXinSmallVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WeiXinSmallVersionRecord> getRecordType() {
        return WeiXinSmallVersionRecord.class;
    }

    /**
     * The column <code>zone.wei_xin_small_version.version</code>.
     */
    public final TableField<WeiXinSmallVersionRecord, String> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>zone.wei_xin_small_version.remark</code>.
     */
    public final TableField<WeiXinSmallVersionRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>zone.wei_xin_small_version.switch</code>.
     */
    public final TableField<WeiXinSmallVersionRecord, Byte> SWITCH = createField(DSL.name("switch"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>zone.wei_xin_small_version.create_date</code>.
     */
    public final TableField<WeiXinSmallVersionRecord, Timestamp> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>zone.wei_xin_small_version</code> table reference
     */
    public WeiXinSmallVersion() {
        this(DSL.name("wei_xin_small_version"), null);
    }

    /**
     * Create an aliased <code>zone.wei_xin_small_version</code> table reference
     */
    public WeiXinSmallVersion(String alias) {
        this(DSL.name(alias), WEI_XIN_SMALL_VERSION);
    }

    /**
     * Create an aliased <code>zone.wei_xin_small_version</code> table reference
     */
    public WeiXinSmallVersion(Name alias) {
        this(alias, WEI_XIN_SMALL_VERSION);
    }

    private WeiXinSmallVersion(Name alias, Table<WeiXinSmallVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private WeiXinSmallVersion(Name alias, Table<WeiXinSmallVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> WeiXinSmallVersion(Table<O> child, ForeignKey<O, WeiXinSmallVersionRecord> key) {
        super(child, key, WEI_XIN_SMALL_VERSION);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEI_XIN_SMALL_VERSION_PRIMARY);
    }

    @Override
    public UniqueKey<WeiXinSmallVersionRecord> getPrimaryKey() {
        return Keys.KEY_WEI_XIN_SMALL_VERSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<WeiXinSmallVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<WeiXinSmallVersionRecord>>asList(Keys.KEY_WEI_XIN_SMALL_VERSION_PRIMARY);
    }

    @Override
    public WeiXinSmallVersion as(String alias) {
        return new WeiXinSmallVersion(DSL.name(alias), this);
    }

    @Override
    public WeiXinSmallVersion as(Name alias) {
        return new WeiXinSmallVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WeiXinSmallVersion rename(String name) {
        return new WeiXinSmallVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WeiXinSmallVersion rename(Name name) {
        return new WeiXinSmallVersion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Byte, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
