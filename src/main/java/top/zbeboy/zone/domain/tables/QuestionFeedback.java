/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zhe;
import top.zbeboy.zone.domain.tables.records.QuestionFeedbackRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionFeedback extends TableImpl<QuestionFeedbackRecord> {

    private static final long serialVersionUID = 191092893;

    /**
     * The reference instance of <code>zhe.question_feedback</code>
     */
    public static final QuestionFeedback QUESTION_FEEDBACK = new QuestionFeedback();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionFeedbackRecord> getRecordType() {
        return QuestionFeedbackRecord.class;
    }

    /**
     * The column <code>zhe.question_feedback.feedback_id</code>.
     */
    public final TableField<QuestionFeedbackRecord, String> FEEDBACK_ID = createField("feedback_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zhe.question_feedback.real_name</code>.
     */
    public final TableField<QuestionFeedbackRecord, String> REAL_NAME = createField("real_name", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>zhe.question_feedback.user_email</code>.
     */
    public final TableField<QuestionFeedbackRecord, String> USER_EMAIL = createField("user_email", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>zhe.question_feedback.simple_des</code>.
     */
    public final TableField<QuestionFeedbackRecord, String> SIMPLE_DES = createField("simple_des", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>zhe.question_feedback.detail_des</code>.
     */
    public final TableField<QuestionFeedbackRecord, String> DETAIL_DES = createField("detail_des", org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>zhe.question_feedback.feedback_date</code>.
     */
    public final TableField<QuestionFeedbackRecord, Timestamp> FEEDBACK_DATE = createField("feedback_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>zhe.question_feedback.deal_status</code>.
     */
    public final TableField<QuestionFeedbackRecord, Integer> DEAL_STATUS = createField("deal_status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>zhe.question_feedback.deal_date</code>.
     */
    public final TableField<QuestionFeedbackRecord, Timestamp> DEAL_DATE = createField("deal_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>zhe.question_feedback.deal_username</code>.
     */
    public final TableField<QuestionFeedbackRecord, String> DEAL_USERNAME = createField("deal_username", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>zhe.question_feedback</code> table reference
     */
    public QuestionFeedback() {
        this(DSL.name("question_feedback"), null);
    }

    /**
     * Create an aliased <code>zhe.question_feedback</code> table reference
     */
    public QuestionFeedback(String alias) {
        this(DSL.name(alias), QUESTION_FEEDBACK);
    }

    /**
     * Create an aliased <code>zhe.question_feedback</code> table reference
     */
    public QuestionFeedback(Name alias) {
        this(alias, QUESTION_FEEDBACK);
    }

    private QuestionFeedback(Name alias, Table<QuestionFeedbackRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionFeedback(Name alias, Table<QuestionFeedbackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> QuestionFeedback(Table<O> child, ForeignKey<O, QuestionFeedbackRecord> key) {
        super(child, key, QUESTION_FEEDBACK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Zhe.ZHE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUESTION_FEEDBACK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuestionFeedbackRecord> getPrimaryKey() {
        return Keys.KEY_QUESTION_FEEDBACK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuestionFeedbackRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionFeedbackRecord>>asList(Keys.KEY_QUESTION_FEEDBACK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionFeedback as(String alias) {
        return new QuestionFeedback(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionFeedback as(Name alias) {
        return new QuestionFeedback(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionFeedback rename(String name) {
        return new QuestionFeedback(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionFeedback rename(Name name) {
        return new QuestionFeedback(name, null);
    }
}
