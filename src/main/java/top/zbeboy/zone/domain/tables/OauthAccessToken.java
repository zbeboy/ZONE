/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.OauthAccessTokenRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class OauthAccessToken extends TableImpl<OauthAccessTokenRecord> {

    private static final long serialVersionUID = 1068142818;

    /**
     * The reference instance of <code>zone.oauth_access_token</code>
     */
    public static final OauthAccessToken OAUTH_ACCESS_TOKEN = new OauthAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthAccessTokenRecord> getRecordType() {
        return OauthAccessTokenRecord.class;
    }

    /**
     * The column <code>zone.oauth_access_token.token_id</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> TOKEN_ID = createField(DSL.name("token_id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>zone.oauth_access_token.token</code>.
     */
    public final TableField<OauthAccessTokenRecord, byte[]> TOKEN = createField(DSL.name("token"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>zone.oauth_access_token.authentication_id</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> AUTHENTICATION_ID = createField(DSL.name("authentication_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>zone.oauth_access_token.user_name</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>zone.oauth_access_token.client_id</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> CLIENT_ID = createField(DSL.name("client_id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>zone.oauth_access_token.authentication</code>.
     */
    public final TableField<OauthAccessTokenRecord, byte[]> AUTHENTICATION = createField(DSL.name("authentication"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>zone.oauth_access_token.refresh_token</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>zone.oauth_access_token</code> table reference
     */
    public OauthAccessToken() {
        this(DSL.name("oauth_access_token"), null);
    }

    /**
     * Create an aliased <code>zone.oauth_access_token</code> table reference
     */
    public OauthAccessToken(String alias) {
        this(DSL.name(alias), OAUTH_ACCESS_TOKEN);
    }

    /**
     * Create an aliased <code>zone.oauth_access_token</code> table reference
     */
    public OauthAccessToken(Name alias) {
        this(alias, OAUTH_ACCESS_TOKEN);
    }

    private OauthAccessToken(Name alias, Table<OauthAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthAccessToken(Name alias, Table<OauthAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OauthAccessToken(Table<O> child, ForeignKey<O, OauthAccessTokenRecord> key) {
        super(child, key, OAUTH_ACCESS_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OAUTH_ACCESS_TOKEN_PRIMARY);
    }

    @Override
    public UniqueKey<OauthAccessTokenRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_ACCESS_TOKEN_PRIMARY;
    }

    @Override
    public List<UniqueKey<OauthAccessTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthAccessTokenRecord>>asList(Keys.KEY_OAUTH_ACCESS_TOKEN_PRIMARY);
    }

    @Override
    public OauthAccessToken as(String alias) {
        return new OauthAccessToken(DSL.name(alias), this);
    }

    @Override
    public OauthAccessToken as(Name alias) {
        return new OauthAccessToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthAccessToken rename(String name) {
        return new OauthAccessToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthAccessToken rename(Name name) {
        return new OauthAccessToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, byte[], String, String, String, byte[], String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
