/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.TrainingSpecialRecord;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TrainingSpecial extends TableImpl<TrainingSpecialRecord> {

    private static final long serialVersionUID = -1876868724;

    /**
     * The reference instance of <code>zone.training_special</code>
     */
    public static final TrainingSpecial TRAINING_SPECIAL = new TrainingSpecial();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainingSpecialRecord> getRecordType() {
        return TrainingSpecialRecord.class;
    }

    /**
     * The column <code>zone.training_special.training_special_id</code>.
     */
    public final TableField<TrainingSpecialRecord, String> TRAINING_SPECIAL_ID = createField(DSL.name("training_special_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_special.title</code>.
     */
    public final TableField<TrainingSpecialRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>zone.training_special.cover</code>.
     */
    public final TableField<TrainingSpecialRecord, String> COVER = createField(DSL.name("cover"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_special.username</code>.
     */
    public final TableField<TrainingSpecialRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_special.publisher</code>.
     */
    public final TableField<TrainingSpecialRecord, String> PUBLISHER = createField(DSL.name("publisher"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>zone.training_special.release_time</code>.
     */
    public final TableField<TrainingSpecialRecord, Timestamp> RELEASE_TIME = createField(DSL.name("release_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>zone.training_special</code> table reference
     */
    public TrainingSpecial() {
        this(DSL.name("training_special"), null);
    }

    /**
     * Create an aliased <code>zone.training_special</code> table reference
     */
    public TrainingSpecial(String alias) {
        this(DSL.name(alias), TRAINING_SPECIAL);
    }

    /**
     * Create an aliased <code>zone.training_special</code> table reference
     */
    public TrainingSpecial(Name alias) {
        this(alias, TRAINING_SPECIAL);
    }

    private TrainingSpecial(Name alias, Table<TrainingSpecialRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainingSpecial(Name alias, Table<TrainingSpecialRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrainingSpecial(Table<O> child, ForeignKey<O, TrainingSpecialRecord> key) {
        super(child, key, TRAINING_SPECIAL);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAINING_SPECIAL_COVER, Indexes.TRAINING_SPECIAL_PRIMARY, Indexes.TRAINING_SPECIAL_USERNAME);
    }

    @Override
    public UniqueKey<TrainingSpecialRecord> getPrimaryKey() {
        return Keys.KEY_TRAINING_SPECIAL_PRIMARY;
    }

    @Override
    public List<UniqueKey<TrainingSpecialRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainingSpecialRecord>>asList(Keys.KEY_TRAINING_SPECIAL_PRIMARY);
    }

    @Override
    public List<ForeignKey<TrainingSpecialRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrainingSpecialRecord, ?>>asList(Keys.TRAINING_SPECIAL_IBFK_2, Keys.TRAINING_SPECIAL_IBFK_1);
    }

    public Files files() {
        return new Files(this, Keys.TRAINING_SPECIAL_IBFK_2);
    }

    public Users users() {
        return new Users(this, Keys.TRAINING_SPECIAL_IBFK_1);
    }

    @Override
    public TrainingSpecial as(String alias) {
        return new TrainingSpecial(DSL.name(alias), this);
    }

    @Override
    public TrainingSpecial as(Name alias) {
        return new TrainingSpecial(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingSpecial rename(String name) {
        return new TrainingSpecial(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingSpecial rename(Name name) {
        return new TrainingSpecial(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
