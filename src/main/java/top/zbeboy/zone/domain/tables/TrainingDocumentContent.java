/*
 * This file is generated by jOOQ.
 */
package top.zbeboy.zone.domain.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import top.zbeboy.zone.domain.Indexes;
import top.zbeboy.zone.domain.Keys;
import top.zbeboy.zone.domain.Zone;
import top.zbeboy.zone.domain.tables.records.TrainingDocumentContentRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TrainingDocumentContent extends TableImpl<TrainingDocumentContentRecord> {

    private static final long serialVersionUID = 1201224279;

    /**
     * The reference instance of <code>zone.training_document_content</code>
     */
    public static final TrainingDocumentContent TRAINING_DOCUMENT_CONTENT = new TrainingDocumentContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainingDocumentContentRecord> getRecordType() {
        return TrainingDocumentContentRecord.class;
    }

    /**
     * The column <code>zone.training_document_content.training_document_id</code>.
     */
    public final TableField<TrainingDocumentContentRecord, String> TRAINING_DOCUMENT_ID = createField(DSL.name("training_document_id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>zone.training_document_content.training_document_content</code>.
     */
    public final TableField<TrainingDocumentContentRecord, String> TRAINING_DOCUMENT_CONTENT_ = createField(DSL.name("training_document_content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>zone.training_document_content</code> table reference
     */
    public TrainingDocumentContent() {
        this(DSL.name("training_document_content"), null);
    }

    /**
     * Create an aliased <code>zone.training_document_content</code> table reference
     */
    public TrainingDocumentContent(String alias) {
        this(DSL.name(alias), TRAINING_DOCUMENT_CONTENT);
    }

    /**
     * Create an aliased <code>zone.training_document_content</code> table reference
     */
    public TrainingDocumentContent(Name alias) {
        this(alias, TRAINING_DOCUMENT_CONTENT);
    }

    private TrainingDocumentContent(Name alias, Table<TrainingDocumentContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainingDocumentContent(Name alias, Table<TrainingDocumentContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrainingDocumentContent(Table<O> child, ForeignKey<O, TrainingDocumentContentRecord> key) {
        super(child, key, TRAINING_DOCUMENT_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return Zone.ZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAINING_DOCUMENT_CONTENT_TRAINING_DOCUMENT_ID);
    }

    @Override
    public List<UniqueKey<TrainingDocumentContentRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainingDocumentContentRecord>>asList(Keys.KEY_TRAINING_DOCUMENT_CONTENT_TRAINING_DOCUMENT_ID);
    }

    @Override
    public List<ForeignKey<TrainingDocumentContentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrainingDocumentContentRecord, ?>>asList(Keys.TRAINING_DOCUMENT_CONTENT_IBFK_1);
    }

    public TrainingDocument trainingDocument() {
        return new TrainingDocument(this, Keys.TRAINING_DOCUMENT_CONTENT_IBFK_1);
    }

    @Override
    public TrainingDocumentContent as(String alias) {
        return new TrainingDocumentContent(DSL.name(alias), this);
    }

    @Override
    public TrainingDocumentContent as(Name alias) {
        return new TrainingDocumentContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingDocumentContent rename(String name) {
        return new TrainingDocumentContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingDocumentContent rename(Name name) {
        return new TrainingDocumentContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
